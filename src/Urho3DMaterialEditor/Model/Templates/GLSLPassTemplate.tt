<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#

foreach (var define in Graph.Defines)
{
    WriteLine("#if !defined("+define+")");
    WriteLine("#define "+define);
    WriteLine("#endif");
}

foreach (var undefine in Graph.Undefines)
{
    WriteLine("#if defined("+undefine+")");
    WriteLine("#undef "+undefine);
    WriteLine("#endif");
}

#>

// ------------------- Vertex Shader ---------------

#if defined(DIRLIGHT) && (!defined(GL_ES) || defined(WEBGL))
    #define NUMCASCADES 4
#else
    #define NUMCASCADES 1
#endif

#ifdef COMPILEVS

// Silence GLSL 150 deprecation warnings
#ifdef GL3
#define attribute in
#define varying out
#endif

<#

foreach (var uniform in Graph.VertexShaderAttributes)
{
	if (uniform.Type == NodeTypes.VertexData)
		throw new InvalidOperationException();
	var type = GLSLCodeGen.GetType(uniform.OutputPins[0].Type);
	if (uniform.Name == "BlendIndices")
		type = "vec4";
	uniform.Extra.Define.WriteLineIfDef(this,"attribute "+type+" i"+uniform.Name+GLSLCodeGen.GetArraySize(uniform.OutputPins[0].Type)+";");
}
foreach (var uniform in VertexShaderUniformsAndFunctions.Uniforms)
{
	uniform.Extra.Define.WriteLineIfDef(this,"uniform "+GLSLCodeGen.GetType(uniform.Type)+" "+uniform.Name+GLSLCodeGen.GetArraySize(uniform.Type)+";");
}
foreach (var varyingGroup in Graph.VertexShaderVaryings.ToLookup(_=>_.Extra.Define.GetExpression()))
{
    foreach (var varying in varyingGroup)
    {
        WriteLine(varyingGroup.Key, "varying " + GLSLCodeGen.GetType(GLSLCodeGen.GetVaryingType(varying.InputPins[0].Type)) + " v" + varying.Value + GLSLCodeGen.GetArraySize(varying.InputPins[0].Type) + ";");
    }
}

this.WriteLine(null,"");
#>

attribute float iObjectIndex;


<#
	foreach (var function in VertexShaderUniformsAndFunctions.Functions)
	{
		WriteLine("// --- "+function+" ---");
		WriteLine(VertexShaderGenerator.GetFunction(function));
	}
	this.WriteLine(null,"");
#>

void VS()
{
<#
	foreach (var varying in Graph.VertexShaderVaryings)
		VertexShaderGenerator.GenerateCode(varying);
	this.WriteLine(null,"");
	var ret = VertexShaderGenerator.GenerateCode(Graph.OutputPosition);
	WriteLine("vec4 ret =  " + ret + ";");
	this.WriteLine(null,"");
#>

    // While getting the clip coordinate, also automatically set gl_ClipVertex for user clip planes
    #if !defined(GL_ES) && !defined(GL3)
       gl_ClipVertex = ret;
    #elif defined(GL3)
       gl_ClipDistance[0] = dot(cClipPlane, ret);
    #endif
    gl_Position = ret;
}

#else
// ------------------- Pixel Shader ---------------

<#
foreach (var uniform in PixelShaderUniformsAndFunctions.Uniforms)
{
//	WriteIfDef(uniform);
	if (uniform.Type == PinTypes.LightMatrices)
	{
		uniform.Extra.Define.WriteLineIfDef(this, @"
#if !defined(GL_ES) || defined(WEBGL)
    uniform mat4 cLightMatrices[4];
#else
    uniform highp mat4 cLightMatrices[2];
#endif
");
	}
	else
	{
		uniform.Extra.Define.WriteLineIfDef(this, "uniform "+GLSLCodeGen.GetType(uniform.Type)+" "+uniform.Name+";");
	}
//	WriteEndIf(uniform);
}
foreach (var uniform in Graph.Samplers)
{
	if (uniform.Name == SamplerNodeFactory.ShadowMap)
	{
	uniform.Extra.Define.WriteLineIfDef(this,@"
#ifndef GL_ES
    #ifdef VSM_SHADOW
        uniform sampler2D sShadowMap;
    #else
        uniform sampler2DShadow sShadowMap;
    #endif
#else
    uniform highp sampler2D sShadowMap;
#endif
	");
	}
	else
	{
	uniform.Extra.Define.WriteLineIfDef(this,"uniform "+GLSLCodeGen.GetType(uniform.OutputPins[0])+" "+GLSLCodeGen.GetSamplerName(uniform)+";");
	}
}
foreach (var varyingGroup in Graph.PixelShaderVaryings.ToLookup(_=>_.Extra.Define.GetExpression()))
{
    foreach (var varying in varyingGroup)
    {
        WriteLine(varyingGroup.Key, "varying " + GLSLCodeGen.GetType(GLSLCodeGen.GetVaryingType(varying.OutputPins[0].Type)) + " v" + varying.Value + GLSLCodeGen.GetArraySize(varying.OutputPins[0].Type) + ";");
    }
}

this.WriteLine(null,"");
#>

<#
	foreach (var function in PixelShaderUniformsAndFunctions.Functions)
	{
		WriteLine("// --- "+function+" ---");
		WriteLine(PixelShaderGenerator.GetFunction(function));
	}
	this.WriteLine(null,"");
#>

void PS()
{
<#
	foreach (var discard in Graph.Discards)
		PixelShaderGenerator.GenerateCode(discard);
	foreach (var rt in Graph.RenderTargets)
		PixelShaderGenerator.GenerateCode(rt);
	this.WriteLine(null,"");
#>
}
#endif